package ${ServiceImplPackage};

import com.github.pagehelper.PageHelper;
import ${modelPackage}.${ModelSimpleName};
import ${modelPackage}.${ModelSimpleName}Example;
import ${MapperPackage}.${DaoSimpleName};
import ${ServicePackage}.${ServiceSimpleName};
import ${modelPackage}.param.${ModelSimpleName}RequestParam;
import ${voPackage}.${VoClassName};
import ${voMapperPackage}.${VoMapperClassName};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import com.github.pagehelper.PageInfo;
import jakarta.annotation.Resource;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

/**
 * @description: ${tableRemark}服务层接口实现
 */
@Slf4j
@Service
public class ${ServiceImplSimpleName} implements ${ServiceSimpleName} {

    @Resource
    private ${DaoSimpleName} ${DaoVariableName};
    
    @Resource
    private ${VoMapperClassName} ${ModelSimpleName.toLowerCase()}VoMapper;

    /**
     * 分页查询
     *
     * @param requestParam 查询参数，包含分页信息和查询条件
     * @return 分页查询结果，已转换为VO对象
     */
    public Page<${VoClassName}> page(${ModelSimpleName}RequestParam requestParam) {
        PageHelper.startPage(requestParam.getPage(), requestParam.getSize());
        ${ModelSimpleName}Example example = new ${ModelSimpleName}Example();
        ${ModelSimpleName}Example.Criteria criteria = example.createCriteria();
        
        // 如果有查询条件，则添加到criteria中
        // 这里需要根据实际的字段添加条件
        // 示例: if (requestParam.getName() != null) {
        //     criteria.andNameLike("%" + requestParam.getName() + "%");
        // }
        
        List<${ModelSimpleName}> lst = ${DaoVariableName}.selectByExample(example);
        PageInfo<${ModelSimpleName}> pageInfo = new PageInfo<>(lst);
        
        // Convert to VO list
        List<${VoClassName}> voList = ${ModelSimpleName.toLowerCase()}VoMapper.toVoList(pageInfo.getList());
        
        return new PageImpl<>(
            voList,
            PageRequest.of(pageInfo.getPageNum() - 1, pageInfo.getPageSize()),
            pageInfo.getTotal()
        );
    }

    /**
     * 根据主键查询并转换为VO
     *
#if($hasSinglePrimaryKey)
     * @param ${primaryKeyJavaProperty} 主键
#elseif($hasCompositePrimaryKey)
#foreach($prop in $primaryKeyJavaProperties)
     * @param ${prop} 主键字段${foreach.index}
#end
#else
     * @param id 主键ID
#end
     * @return VO查询结果
     */
#if($hasSinglePrimaryKey)
    public ${VoClassName} selectByPrimaryKey(${primaryKeyMethodParam}) {
        ${ModelSimpleName} model = ${DaoVariableName}.selectByPrimaryKey(${primaryKeyServiceCall});
#elseif($hasCompositePrimaryKey)
    public ${VoClassName} selectByPrimaryKey(${primaryKeyMethodParams}) {
        ${ModelSimpleName} model = ${DaoVariableName}.selectByPrimaryKey(${primaryKeyServiceCallParams});
#else
    public ${VoClassName} selectByPrimaryKey(Long id) {
        ${ModelSimpleName} model = ${DaoVariableName}.selectByPrimaryKey(id);
#end
        if (model == null) {
            return null;
        }
        return ${ModelSimpleName.toLowerCase()}VoMapper.toVo(model);
    }

    /**
     * 根据主键更新
     *
     * @param record 更新的数据对象
     * @return 是否更新成功
     */
    public Boolean updateByPrimaryKeySelective(${ModelSimpleName} record) {
        return ${DaoVariableName}.updateByPrimaryKeySelective(record) > 0;
    }

    /**
     * 根据条件更新
     *
     * @param record 数据对象，包含更新的数据和条件
     * @return 影响行数
     */
    public int updateByExampleSelective(${ModelSimpleName} record) {
        ${ModelSimpleName}Example example = new ${ModelSimpleName}Example();
        example.createCriteria();
        return ${DaoVariableName}.updateByExampleSelective(record, example);
    }

    /**
     * 根据主键删除
     *
#if($hasSinglePrimaryKey)
     * @param ${primaryKeyJavaProperty} 主键
#elseif($hasCompositePrimaryKey)
#foreach($prop in $primaryKeyJavaProperties)
     * @param ${prop} 主键字段${foreach.index}
#end
#else
     * @param id 主键ID
#end
     * @return 是否删除成功
     */
#if($hasSinglePrimaryKey)
    public Boolean deleteByPrimaryKey(${primaryKeyMethodParam}) {
        return ${DaoVariableName}.deleteByPrimaryKey(${primaryKeyServiceCall}) > 0;
    }
#elseif($hasCompositePrimaryKey)
    public Boolean deleteByPrimaryKey(${primaryKeyMethodParams}) {
        return ${DaoVariableName}.deleteByPrimaryKey(${primaryKeyServiceCallParams}) > 0;
    }
#else
    public Boolean deleteByPrimaryKey(Long id) {
        return ${DaoVariableName}.deleteByPrimaryKey(id) > 0;
    }
#end

    /**
     * 根据条件删除
     *
     * @param record 删除条件
     * @return 影响行数
     */
    public int deleteByExample(${ModelSimpleName} record) {
        ${ModelSimpleName}Example example = new ${ModelSimpleName}Example();
        example.createCriteria();
        return ${DaoVariableName}.deleteByExample(example);
    }

    /**
     * 新增
     *
     * @param record 新增的数据对象
     * @return 是否新增成功
     */
   public Boolean insertSelective(${ModelSimpleName} record) {
       return ${DaoVariableName}.insertSelective(record) > 0;
   }
   
   /**
    * 批量新增
    *
    * @param records 批量新增的数据对象列表
    * @return 是否新增成功
    */
   public Boolean batchInsert(List<${ModelSimpleName}> records) {
       if (records == null || records.isEmpty()) {
           return false;
       }
       
       return ${DaoVariableName}.batchInsert(records) > 0;
   }
   
   /**
    * 批量选择性新增（忽略null值）
    *
    * @param records 批量新增的数据对象列表
    * @return 是否新增成功
    */
   public Boolean batchInsertSelective(List<${ModelSimpleName}> records) {
       if (records == null || records.isEmpty()) {
           return false;
       }
       
       return ${DaoVariableName}.batchInsertSelective(records) > 0;
   }
   
   /**
    * Excel文件导入处理
    *
    * @param file Excel文件
    * @return 导入结果信息
    * @throws Exception 导入过程中的异常
    */
   public String importExcel(MultipartFile file) throws Exception {
       try {
           // 1. 文件验证
           if (file.isEmpty()) {
               throw new IllegalArgumentException("上传文件不能为空");
           }
           
           String originalFilename = file.getOriginalFilename();
           if (originalFilename == null || (!originalFilename.endsWith(".xlsx") && !originalFilename.endsWith(".xls"))) {
               throw new IllegalArgumentException("文件格式不正确，仅支持.xlsx和.xls格式");
           }
           
           // 2. 解析Excel文件
           // TODO: 实现Excel文件解析逻辑
           // 建议使用EasyExcel或Apache POI进行Excel解析
           // List<${ModelSimpleName}> records = parseExcelFile(file);
           
           // 3. 数据验证和处理
           // if (records == null || records.isEmpty()) {
           //     return "Excel文件中没有有效数据";
           // }
           
           // 4. 为每条记录生成Snowflake ID（如果需要）
           // for (${ModelSimpleName} record : records) {
           //     if (record.getId() == null) {
           //         record.setId(SnowflakeUtil.nextId());
           //     }
           //     // 可以在这里添加其他业务逻辑验证
           // }
           
           // 5. 批量插入数据
           // Boolean success = batchInsert(records);
           // if (!success) {
           //     throw new RuntimeException("批量插入数据失败");
           // }
           
           // 6. 返回成功结果
           // return "成功导入 " + records.size() + " 条记录";
           
           // 临时返回，实际使用时请实现上述逻辑
           log.info("Excel导入请求: 文件名={}, 文件大小={}", originalFilename, file.getSize());
           return "Excel导入功能待实现，请添加Excel解析逻辑";
           
       } catch (Exception e) {
           log.error("Excel导入失败: {}", e.getMessage(), e);
           throw new Exception("Excel导入失败: " + e.getMessage(), e);
       }
   }
   
   // TODO: 实现Excel文件解析的私有方法
   // private List<${ModelSimpleName}> parseExcelFile(MultipartFile file) throws Exception {
   //     // 使用EasyExcel或Apache POI解析Excel文件
   //     // 返回解析后的数据列表
   //     return new ArrayList<>();
   // }

}
