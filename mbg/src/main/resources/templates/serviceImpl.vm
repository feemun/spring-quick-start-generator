package ${ServiceImplPackage};

import com.github.pagehelper.PageHelper;
import ${modelPackage};
import ${modelPackage}Example;
#if(${multiConditionQuery})
import ${ModelPoName};
#end
import ${DaoName};
import ${ServiceName};
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * @description: ${tableRemark}服务层接口实现
 */
@Service
public class ${ServiceImplSimpleName} implements ${ServiceSimpleName} {

    @Autowired
    private ${DaoSimpleName} ${DaoVariableName};

    /**
     * 分页查询
     *
     * @param pageNum   当前页码
     * @param pageSize  每页显示数量
     * @param condition 查询条件
     * @return 查询结果列表
     */
    public List<${ModelSimpleName}> page(Integer pageNum, Integer pageSize, ${ModelSimpleName} condition) {
        PageHelper.startPage(pageNum, pageSize);
        ${ModelSimpleName}Example example = new ${ModelSimpleName}Example();
        ${ModelSimpleName}Example.Criteria criteria = example.createCriteria();
        
        // 如果有查询条件，则添加到criteria中
        if (condition != null) {
            // 这里需要根据实际的字段添加条件
            // 示例: if (condition.getName() != null) criteria.andNameLike("%" + condition.getName() + "%");
        }
        
        return ${DaoVariableName}.selectByExample(example);
    }

    /**
     * 根据主键查询
     *
     * @param id 主键ID
     * @return 查询结果
     */
    public ${ModelSimpleName} selectByPrimaryKey(Long id) {
        return ${DaoVariableName}.selectByPrimaryKey(id);
    }

    /**
     * 根据主键更新
     *
     * @param record 更新的数据对象
     * @return 是否更新成功
     */
    public Boolean updateByPrimaryKeySelective(${ModelSimpleName} record) {
        return ${DaoVariableName}.updateByPrimaryKeySelective(record) > 0;
    }

    /**
     * 根据条件更新
     *
     * @param record 数据对象，包含更新的数据和条件
     * @return 影响行数
     */
    public int updateByExampleSelective(${ModelSimpleName} record) {
        ${ModelSimpleName}Example example = new ${ModelSimpleName}Example();
        example.createCriteria();
        return ${DaoVariableName}.updateByExampleSelective(record, example);
    }

    /**
     * 根据主键删除
     *
     * @param id 主键ID
     * @return 是否删除成功
     */
    public Boolean deleteByPrimaryKey(Long id) {
        return ${DaoVariableName}.deleteByPrimaryKey(id) > 0;
    }

    /**
     * 根据条件删除
     *
     * @param record 删除条件
     * @return 影响行数
     */
    public int deleteByExample(${ModelSimpleName} record) {
        ${ModelSimpleName}Example example = new ${ModelSimpleName}Example();
        example.createCriteria();
        return ${DaoVariableName}.deleteByExample(example);
    }

    /**
     * 新增
     *
     * @param record 新增的数据对象
     * @return 是否新增成功
     */
   public Boolean insertSelective(${ModelSimpleName} record) {
       return ${DaoVariableName}.insertSelective(record) > 0;
   }

}
