package ${ControllerPackage};

import ${packageName}.${ModelSimpleName};
import ${servicePackage}.${ServiceClassName};
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.util.List;
import org.springframework.data.domain.Page;
import ${packageName}.param.${ModelSimpleName}RequestParam;
import ${packageName}.vo.${VoClassName};
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import jakarta.annotation.Resource;
import cloud.catfish.common.util.SnowflakeUtil;

@Tag(name = "${ModelSimpleName} API", description = "${ModelSimpleName}相关的增删改查操作")
@RestController
@RequestMapping("${apiBaseUrl}")
@Slf4j
public class ${ControllerSimpleName} {

    @Resource
    private ${ServiceClassName} ${ServiceVariableName};

    @Operation(summary = "分页条件查询", description = "根据条件分页查询${ModelSimpleName}列表")
    @PostMapping("/search")
    public ResponseEntity<Page<${VoClassName}>> search(@Valid @RequestBody ${ModelSimpleName}RequestParam req) {
        Page<${VoClassName}> page = ${ServiceVariableName}.page(req);
        return ResponseEntity.ok(page);
    }

#if($hasPrimaryKey)
    /**
     * 根据主键查询
     *
#foreach($prop in $primaryKeyProperties)
     * @param ${prop} 主键字段
#end
     * @return 查询结果
     */
    @Operation(summary = "根据主键查询", description = "根据ID查询单个${ModelSimpleName}")
    @GetMapping("/${primaryKeyPathVariables}")
    public ResponseEntity<${VoClassName}> selectByPrimaryKey(${primaryKeyMethodParams}) {
        ${VoClassName} result = ${ServiceVariableName}.selectByPrimaryKey(${primaryKeyServiceCallParams});
        return ResponseEntity.ok(result);
    }
#end

    @Operation(summary = "根据主键更新", description = "更新${ModelSimpleName}信息")
    @PutMapping("")
    public ResponseEntity<Void> updateByPrimaryKeySelective(@Valid @RequestBody ${ModelSimpleName} record) {
        ${ServiceVariableName}.updateByPrimaryKeySelective(record);
        return ResponseEntity.ok().build();
    }

    @Operation(summary = "根据条件批量更新", description = "根据条件批量更新${ModelSimpleName}信息")
    @PutMapping("/batch")
    public ResponseEntity<Integer> batchUpdate(@Valid @RequestBody ${ModelSimpleName} record) {
        Integer rowsAffected = ${ServiceVariableName}.updateByExampleSelective(record);
        log.info("Updated {} row(s) by condition.", rowsAffected);
        return ResponseEntity.ok(rowsAffected);
    }

#if($hasPrimaryKey)
    @Operation(summary = "根据主键删除", description = "删除单个${ModelSimpleName}")
    @DeleteMapping("/${primaryKeyPathVariables}")
    public ResponseEntity<Boolean> deleteByPrimaryKey(${primaryKeyMethodParams}) {
        Boolean success = ${ServiceVariableName}.deleteByPrimaryKey(${primaryKeyServiceCallParams});
        log.info(success ? "Successfully deleted ${ModelSimpleName} with primary key: ${primaryKeyServiceCallParams}" 
                        : "Failed to delete ${ModelSimpleName} with primary key: ${primaryKeyServiceCallParams}");
        return ResponseEntity.ok(success);
    }
#end

    @Operation(summary = "根据条件批量删除", description = "根据条件批量删除${ModelSimpleName}")
    @DeleteMapping("/batch")
    public ResponseEntity<Integer> batchDelete(@Valid @RequestBody ${ModelSimpleName} record) {
        Integer rowsAffected = ${ServiceVariableName}.deleteByExample(record);
        log.info("Deleted {} row(s) by condition.", rowsAffected);
        return ResponseEntity.ok(rowsAffected);
    }

    @Operation(summary = "创建新记录", description = "创建新的${ModelSimpleName}")
    @PostMapping
    public ResponseEntity<${ModelSimpleName}> create(@Valid @RequestBody ${ModelSimpleName} record) {
        // 使用Twitter Snowflake算法生成ID
        Long snowflakeId = SnowflakeUtil.nextId();
        record.setId(snowflakeId);
        
        ${ServiceVariableName}.insertSelective(record);
        return ResponseEntity.status(HttpStatus.CREATED).body(record);
    }

    @Operation(summary = "Excel批量导入", description = "通过Excel文件批量导入${ModelSimpleName}数据")
    @PostMapping("/import")
    public ResponseEntity<String> importExcel(@RequestParam("file") MultipartFile file)  throws Exception {
        // 委托给服务层处理所有业务逻辑
        String result = ${ServiceVariableName}.importExcel(file);
        return ResponseEntity.ok(result);
    }

    @Operation(summary = "导出Excel", description = "导出${ModelSimpleName}数据到Excel文件")
    @GetMapping("/export")
    public void exportExcel(HttpServletResponse response, @RequestParam(required = false) ${ModelSimpleName} condition) throws Exception {
        // 设置响应头信息
        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        String filename = new String("${ModelSimpleName}数据.xlsx".getBytes("UTF-8"), "ISO-8859-1");
        response.setHeader("Content-Disposition", "attachment;filename=" + filename);
        
        // 这里应该添加数据查询和Excel导出的逻辑
        // 如果condition不为空，则按条件查询
        // 示例：List<${ModelSimpleName}> records = condition != null ? 
        //     ${ServiceVariableName}.selectByExample(condition) : ${ServiceVariableName}.selectAll();
        // excelService.exportExcel(response, records, "${ModelSimpleName}数据");
        
        // 导出逻辑实现...
    }

}
