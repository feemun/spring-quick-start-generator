package cloud.catfish.mbg.plugin;

import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.TopLevelClass;

import java.util.List;

/**
 * MyBatis Generator plugin that automatically adds Lombok annotations to generated model classes.
 * 
 * <p>This plugin enhances the generated model classes by adding commonly used Lombok annotations
 * such as @Getter, @Setter, @ToString, @EqualsAndHashCode, @AllArgsConstructor, @NoArgsConstructor,
 * and @Builder. These annotations help reduce boilerplate code and improve code maintainability.</p>
 * 
 * <p><strong>Features:</strong></p>
 * <ul>
 *   <li>Automatically adds essential Lombok annotations to model classes</li>
 *   <li>Reduces boilerplate code by eliminating the need for manual getter/setter methods</li>
 *   <li>Provides builder pattern support through @Builder annotation</li>
 *   <li>Includes proper toString(), equals(), and hashCode() implementations</li>
 *   <li>Supports both parameterized and no-argument constructors</li>
 * </ul>
 * 
 * <p><strong>Usage:</strong></p>
 * <p>Add this plugin to your MyBatis Generator configuration file:</p>
 * <pre>
 * &lt;plugin type="cloud.catfish.mbg.plugin.LombokAnnotationPlugin"&gt;
 * &lt;/plugin&gt;
 * </pre>
 * 
 * @author Generated by MyBatis Generator
 * @version 1.0
 * @since 1.0
 */
public class LombokAnnotationPlugin extends PluginAdapter {

    // Lombok annotation class names
    private static final String LOMBOK_DATA = "lombok.Data";
    private static final String LOMBOK_GETTER = "lombok.Getter";
    private static final String LOMBOK_SETTER = "lombok.Setter";
    private static final String LOMBOK_TO_STRING = "lombok.ToString";
    private static final String LOMBOK_EQUALS_AND_HASH_CODE = "lombok.EqualsAndHashCode";
    private static final String LOMBOK_ALL_ARGS_CONSTRUCTOR = "lombok.AllArgsConstructor";
    private static final String LOMBOK_NO_ARGS_CONSTRUCTOR = "lombok.NoArgsConstructor";
    private static final String LOMBOK_BUILDER = "lombok.Builder";
    
    // Configuration property keys
    private static final String ENABLE_GETTER = "enableGetter";
    private static final String ENABLE_SETTER = "enableSetter";
    private static final String ENABLE_TO_STRING = "enableToString";
    private static final String ENABLE_EQUALS_AND_HASH_CODE = "enableEqualsAndHashCode";
    private static final String ENABLE_ALL_ARGS_CONSTRUCTOR = "enableAllArgsConstructor";
    private static final String ENABLE_NO_ARGS_CONSTRUCTOR = "enableNoArgsConstructor";
    private static final String ENABLE_BUILDER = "enableBuilder";
    
    // Instance fields for configuration
    private boolean enableGetter = true;
    private boolean enableSetter = true;
    private boolean enableToString = true;
    private boolean enableEqualsAndHashCode = true;
    private boolean enableAllArgsConstructor = true;
    private boolean enableNoArgsConstructor = true;
    private boolean enableBuilder = true;

    @Override
    public boolean validate(List<String> warnings) {
        // Parse configuration properties
        parseConfigurationProperties();
        
        // Validate Lombok availability (optional - could check if Lombok is in classpath)
        // For now, we assume Lombok is available since it's a compile-time dependency
        
        return true;
    }
    
    /**
     * Parses configuration properties to determine which Lombok annotations to enable.
     */
    private void parseConfigurationProperties() {
        if (properties != null) {
            enableGetter = Boolean.parseBoolean(properties.getProperty(ENABLE_GETTER, "true"));
            enableSetter = Boolean.parseBoolean(properties.getProperty(ENABLE_SETTER, "true"));
            enableToString = Boolean.parseBoolean(properties.getProperty(ENABLE_TO_STRING, "true"));
            enableEqualsAndHashCode = Boolean.parseBoolean(properties.getProperty(ENABLE_EQUALS_AND_HASH_CODE, "true"));
            enableAllArgsConstructor = Boolean.parseBoolean(properties.getProperty(ENABLE_ALL_ARGS_CONSTRUCTOR, "true"));
            enableNoArgsConstructor = Boolean.parseBoolean(properties.getProperty(ENABLE_NO_ARGS_CONSTRUCTOR, "true"));
            enableBuilder = Boolean.parseBoolean(properties.getProperty(ENABLE_BUILDER, "true"));
        }
    }

    /**
     * 当基础记录类被生成时调用此方法。
     */
    @Override
    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        addLombokAnnotations(topLevelClass);
        return true;
    }

    /**
     * Adds configured Lombok annotations to the generated top-level class.
     * 
     * @param topLevelClass the generated model class to enhance with Lombok annotations
     */
    private void addLombokAnnotations(TopLevelClass topLevelClass) {
        try {
            if (enableToString) {
                addLombokAnnotation(topLevelClass, LOMBOK_TO_STRING, "@ToString");
            }
            
            if (enableEqualsAndHashCode) {
                addLombokAnnotation(topLevelClass, LOMBOK_EQUALS_AND_HASH_CODE, "@EqualsAndHashCode");
            }
            
            if (enableGetter) {
                addLombokAnnotation(topLevelClass, LOMBOK_GETTER, "@Getter");
            }
            
            if (enableSetter) {
                addLombokAnnotation(topLevelClass, LOMBOK_SETTER, "@Setter");
            }
            
            if (enableAllArgsConstructor) {
                addLombokAnnotation(topLevelClass, LOMBOK_ALL_ARGS_CONSTRUCTOR, "@AllArgsConstructor");
            }
            
            if (enableNoArgsConstructor) {
                addLombokAnnotation(topLevelClass, LOMBOK_NO_ARGS_CONSTRUCTOR, "@NoArgsConstructor");
            }
            
            if (enableBuilder) {
                addLombokAnnotation(topLevelClass, LOMBOK_BUILDER, "@Builder");
            }
        } catch (Exception e) {
            // Log error but don't fail the generation process
            System.err.println("Warning: Failed to add Lombok annotations to class " 
                + topLevelClass.getType().getShortName() + ": " + e.getMessage());
        }
    }
    
    /**
     * Adds a single Lombok annotation to the top-level class.
     * 
     * @param topLevelClass the class to add the annotation to
     * @param fullyQualifiedName the fully qualified name of the Lombok annotation
     * @param annotationName the annotation name to add (e.g., "@Getter")
     */
    private void addLombokAnnotation(TopLevelClass topLevelClass, String fullyQualifiedName, String annotationName) {
        topLevelClass.addImportedType(new FullyQualifiedJavaType(fullyQualifiedName));
        topLevelClass.addAnnotation(annotationName);
    }
}